'use strict';

define(function (require) {
  /**
   * kbnTableRow directive
   *
   * Display a row in the table
   * ```
   * <tr ng-repeat="row in rows" kbn-table-row="row"></tr>
   * ```
   */
  require('modules').get('app/discover').directive('kbnTableRows', function (Private) {
    var _ = require('lodash');
    var $ = require('jquery');
    var DocTableRow = Private(require('components/DocTable/DocTableRow'));
    var DocTableDetails = Private(require('components/DocTableDetails/DocTableDetails'));
    var React = require('react');

    return {
      restrict: 'E',
      scope: {
        columns: '=',
        filter: '=',
        indexPattern: '=',
        rows: '=rows'
      },
      link: function link($scope, $el) {
        var el = $el.get(0);
        var openRows = [];

        var actions = {
          toggleRow: function toggleRow(row) {
            $scope.$apply(function () {
              _.toggleInOut($scope.rows, row);
            });
          }
        };

        $scope.$watchMulti(['[]rows', '[]columns', 'indexPattern'], function () {
          var rows = $scope.rows;
          var columns = $scope.columns;
          var indexPattern = $scope.indexPattern;

          if (!rows || !columns || !indexPattern) {
            React.unmountComponentAtNode(el);
            return;
          }

          var tableRows = [];
          var wasOpen = openRows.slice(0);
          $scope.rows.forEach(function (row) {
            var open = alreadyOpen.length > _.pull(alreadyOpen, row);

            rows.push(React.createElement(DocTableRow, {
              row: row,
              open: open,
              columns: columns,
              indexPattern: indexPattern,
              actions: actions }), open && React.createElement(DocTableDetails, {
              row: row,
              open: open,
              columns: columns,
              indexPattern: indexPattern,
              actions: actions }));
          });

          React.render(React.createElement(
            'tbody',
            null,
            tableRows
          ), el);
        });
      }
    };
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcGVuY2VyL2Rldi9lcy9raWJhbmEvc3JjL2tpYmFuYS9jb21wb25lbnRzL0RvY1RhYmxlL0RvY1RhYmxlUm93cy5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLENBQUMsVUFBVSxPQUFPLEVBQUU7Ozs7Ozs7OztBQVN4QixTQUFPLENBQUMsU0FBUyxDQUFDLENBQ2pCLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FDbkIsU0FBUyxDQUFDLGNBQWMsRUFBRSxVQUFVLE9BQU8sRUFBRTtBQUM1QyxRQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUIsUUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLFFBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDO0FBQ3RFLFFBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsNENBQTRDLENBQUMsQ0FBQyxDQUFDO0FBQ3JGLFFBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzs7QUFFN0IsV0FBTztBQUNMLGNBQVEsRUFBRSxHQUFHO0FBQ2IsV0FBSyxFQUFFO0FBQ0wsZUFBTyxFQUFFLEdBQUc7QUFDWixjQUFNLEVBQUUsR0FBRztBQUNYLG9CQUFZLEVBQUUsR0FBRztBQUNqQixZQUFJLEVBQUUsT0FBTztPQUNkO0FBQ0QsVUFBSSxFQUFFLGNBQVUsTUFBTSxFQUFFLEdBQUcsRUFBRTtBQUMzQixZQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BCLFlBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQzs7QUFFbEIsWUFBSSxPQUFPLEdBQUc7QUFDWixtQkFBUyxFQUFBLG1CQUFDLEdBQUcsRUFBRTtBQUNiLGtCQUFNLENBQUMsTUFBTSxDQUFDLFlBQVk7QUFDeEIsZUFBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ2pDLENBQUMsQ0FBQztXQUNKO1NBQ0YsQ0FBQTs7QUFFRCxjQUFNLENBQUMsV0FBVyxDQUFDLENBQ2pCLFFBQVEsRUFDUixXQUFXLEVBQ1gsY0FBYyxDQUNmLEVBQUUsWUFBWTtjQUNSLElBQUksR0FBMkIsTUFBTSxDQUFyQyxJQUFJO2NBQUUsT0FBTyxHQUFrQixNQUFNLENBQS9CLE9BQU87Y0FBRSxZQUFZLEdBQUksTUFBTSxDQUF0QixZQUFZOztBQUVoQyxjQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsWUFBWSxFQUFFO0FBQ3RDLGlCQUFLLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakMsbUJBQU87V0FDUjs7QUFFRCxjQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDbkIsY0FBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxnQkFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLEVBQUU7QUFDakMsZ0JBQUksSUFBSSxHQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLEFBQUMsQ0FBQzs7QUFFM0QsZ0JBQUksQ0FBQyxJQUFJLENBQ1Asb0JBQUMsV0FBVztBQUNWLGlCQUFHLEVBQUUsR0FBRyxBQUFDO0FBQ1Qsa0JBQUksRUFBRSxJQUFJLEFBQUM7QUFDWCxxQkFBTyxFQUFFLE9BQU8sQUFBQztBQUNqQiwwQkFBWSxFQUFFLFlBQVksQUFBQztBQUMzQixxQkFBTyxFQUFFLE9BQU8sQUFBQyxHQUFFLEVBRXJCLElBQUksSUFBSSxvQkFBQyxlQUFlO0FBQ3RCLGlCQUFHLEVBQUUsR0FBRyxBQUFDO0FBQ1Qsa0JBQUksRUFBRSxJQUFJLEFBQUM7QUFDWCxxQkFBTyxFQUFFLE9BQU8sQUFBQztBQUNqQiwwQkFBWSxFQUFFLFlBQVksQUFBQztBQUMzQixxQkFBTyxFQUFFLE9BQU8sQUFBQyxHQUFFLENBQ3RCLENBQUM7V0FDSCxDQUFDLENBQUM7O0FBRUgsZUFBSyxDQUFDLE1BQU0sQ0FBQzs7O1lBQVEsU0FBUztXQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDOUMsQ0FBQyxDQUFDO09BQ0o7S0FDRixDQUFDO0dBQ0gsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9zcGVuY2VyL2Rldi9lcy9raWJhbmEvc3JjL2tpYmFuYS9jb21wb25lbnRzL0RvY1RhYmxlL0RvY1RhYmxlUm93cy5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoZnVuY3Rpb24gKHJlcXVpcmUpIHtcbiAgLyoqXG4gICAqIGtiblRhYmxlUm93IGRpcmVjdGl2ZVxuICAgKlxuICAgKiBEaXNwbGF5IGEgcm93IGluIHRoZSB0YWJsZVxuICAgKiBgYGBcbiAgICogPHRyIG5nLXJlcGVhdD1cInJvdyBpbiByb3dzXCIga2JuLXRhYmxlLXJvdz1cInJvd1wiPjwvdHI+XG4gICAqIGBgYFxuICAgKi9cbiAgcmVxdWlyZSgnbW9kdWxlcycpXG4gIC5nZXQoJ2FwcC9kaXNjb3ZlcicpXG4gIC5kaXJlY3RpdmUoJ2tiblRhYmxlUm93cycsIGZ1bmN0aW9uIChQcml2YXRlKSB7XG4gICAgdmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbiAgICB2YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuICAgIHZhciBEb2NUYWJsZVJvdyA9IFByaXZhdGUocmVxdWlyZSgnY29tcG9uZW50cy9Eb2NUYWJsZS9Eb2NUYWJsZVJvdycpKTtcbiAgICB2YXIgRG9jVGFibGVEZXRhaWxzID0gUHJpdmF0ZShyZXF1aXJlKCdjb21wb25lbnRzL0RvY1RhYmxlRGV0YWlscy9Eb2NUYWJsZURldGFpbHMnKSk7XG4gICAgdmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29sdW1uczogJz0nLFxuICAgICAgICBmaWx0ZXI6ICc9JyxcbiAgICAgICAgaW5kZXhQYXR0ZXJuOiAnPScsXG4gICAgICAgIHJvd3M6ICc9cm93cydcbiAgICAgIH0sXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCAkZWwpIHtcbiAgICAgICAgdmFyIGVsID0gJGVsLmdldCgwKTtcbiAgICAgICAgdmFyIG9wZW5Sb3dzID0gW107XG5cbiAgICAgICAgdmFyIGFjdGlvbnMgPSB7XG4gICAgICAgICAgdG9nZ2xlUm93KHJvdykge1xuICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF8udG9nZ2xlSW5PdXQoJHNjb3BlLnJvd3MsIHJvdyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuJHdhdGNoTXVsdGkoW1xuICAgICAgICAgICdbXXJvd3MnLFxuICAgICAgICAgICdbXWNvbHVtbnMnLFxuICAgICAgICAgICdpbmRleFBhdHRlcm4nLFxuICAgICAgICBdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHtyb3dzLCBjb2x1bW5zLCBpbmRleFBhdHRlcm59ID0gJHNjb3BlO1xuXG4gICAgICAgICAgaWYgKCFyb3dzIHx8ICFjb2x1bW5zIHx8ICFpbmRleFBhdHRlcm4pIHtcbiAgICAgICAgICAgIFJlYWN0LnVubW91bnRDb21wb25lbnRBdE5vZGUoZWwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB0YWJsZVJvd3MgPSBbXTtcbiAgICAgICAgICB2YXIgd2FzT3BlbiA9IG9wZW5Sb3dzLnNsaWNlKDApO1xuICAgICAgICAgICRzY29wZS5yb3dzLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgdmFyIG9wZW4gPSAoYWxyZWFkeU9wZW4ubGVuZ3RoID4gXy5wdWxsKGFscmVhZHlPcGVuLCByb3cpKTtcblxuICAgICAgICAgICAgcm93cy5wdXNoKFxuICAgICAgICAgICAgICA8RG9jVGFibGVSb3dcbiAgICAgICAgICAgICAgICByb3c9e3Jvd31cbiAgICAgICAgICAgICAgICBvcGVuPXtvcGVufVxuICAgICAgICAgICAgICAgIGNvbHVtbnM9e2NvbHVtbnN9XG4gICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuPXtpbmRleFBhdHRlcm59XG4gICAgICAgICAgICAgICAgYWN0aW9ucz17YWN0aW9uc30vPixcblxuICAgICAgICAgICAgICBvcGVuICYmIDxEb2NUYWJsZURldGFpbHNcbiAgICAgICAgICAgICAgICByb3c9e3Jvd31cbiAgICAgICAgICAgICAgICBvcGVuPXtvcGVufVxuICAgICAgICAgICAgICAgIGNvbHVtbnM9e2NvbHVtbnN9XG4gICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuPXtpbmRleFBhdHRlcm59XG4gICAgICAgICAgICAgICAgYWN0aW9ucz17YWN0aW9uc30vPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIFJlYWN0LnJlbmRlcig8dGJvZHk+e3RhYmxlUm93c308L3Rib2R5PiwgZWwpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn0pO1xuIl19